容器(container)
容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用in, not in关键字判断元素是否包含在容器中。

尽管绝大多数容器都提供了某种方式来获取其中的每一个元素，但这并不是容器本身提供的能力，而是可迭代对象赋予了容器这种能力，
当然并不是所有的容器都是可迭代的
比如：Bloom filter，虽然Bloom filter可以用来检测某个元素是否包含在容器中，
但是并不能从容器中获取其中的每一个值，因为Bloom filter压根就没把元素存储在容器中，而是通过一个散列函数映射成一个值保存在数组中。


可迭代对象(iterable)
可以返回一个迭代器的对象都可称之为可迭代对象，
迭代器，迭代器内部持有一个状态，该状态用于记录当前迭代所在的位置，以方便下次迭代的时候获取正确的元素
那么什么迭代器呢？它是一个带状态的对象，他能在你调用next()方法的时候返回容器中的下一个值，
任何实现了__iter__和__next__()（python2中实现next()）方法的对象都是迭代器，__iter__返回迭代器自身，__next__返回容器中的下一个值，
如果容器中没有更多元素了，则抛出StopIteration异常，至于它们到底是如何实现的这并不重要。

生成器(generator)
不需要再像上面的类一样写__iter__()和__next__()方法了，只需要一个yiled关键字。
生成器一定是迭代器（反之不成立），因此任何生成器也是以一种懒加载的模式生成值



容器是一系列元素的集合，str、list、set、dict、file、sockets对象都可以看作是容器，
容器都可以被迭代（用在for，while等语句中），因此他们被称为可迭代对象。
可迭代对象实现了__iter__方法，该方法返回一个迭代器对象。
迭代器持有一个内部状态的字段，用于记录下次迭代返回值，它实现了__next__和__iter__方法，迭代器不会一次性把所有元素加载到内存，
而是需要的时候才生成返回结果。
生成器是一种特殊的迭代器，它的返回值不是通过return而是用yield。
